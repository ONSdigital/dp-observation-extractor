// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	kafka "github.com/ONSdigital/dp-kafka/v2"
	"github.com/ONSdigital/dp-observation-extractor/config"
	"github.com/ONSdigital/dp-observation-extractor/event"
	"github.com/ONSdigital/dp-observation-extractor/initialise"
	"github.com/aws/aws-sdk-go/aws/session"
	"sync"
)

// Ensure, that InitialiserMock does implement initialise.Initialiser.
// If this is not the case, regenerate this file with moq.
var _ initialise.Initialiser = &InitialiserMock{}

// InitialiserMock is a mock implementation of initialise.Initialiser.
//
// 	func TestSomethingThatUsesInitialiser(t *testing.T) {
//
// 		// make and configure a mocked initialise.Initialiser
// 		mockedInitialiser := &InitialiserMock{
// 			DoGetConsumerFunc: func(ctx context.Context, cfg *config.Config) (kafka.IConsumerGroup, error) {
// 				panic("mock out the DoGetConsumer method")
// 			},
// 			DoGetHealthCheckerFunc: func(ctx context.Context, buildTime string, gitCommit string, version string, cfg *config.Config) (*healthcheck.HealthCheck, error) {
// 				panic("mock out the DoGetHealthChecker method")
// 			},
// 			DoGetProducerFunc: func(ctx context.Context, topic string, name initialise.KafkaProducerName, cfg *config.Config) (kafka.IProducer, error) {
// 				panic("mock out the DoGetProducer method")
// 			},
// 			DoGetS3ClientsFunc: func(cfg *config.Config) (*session.Session, map[string]event.S3Client, error) {
// 				panic("mock out the DoGetS3Clients method")
// 			},
// 		}
//
// 		// use mockedInitialiser in code that requires initialise.Initialiser
// 		// and then make assertions.
//
// 	}
type InitialiserMock struct {
	// DoGetConsumerFunc mocks the DoGetConsumer method.
	DoGetConsumerFunc func(ctx context.Context, cfg *config.Config) (kafka.IConsumerGroup, error)

	// DoGetHealthCheckerFunc mocks the DoGetHealthChecker method.
	DoGetHealthCheckerFunc func(ctx context.Context, buildTime string, gitCommit string, version string, cfg *config.Config) (*healthcheck.HealthCheck, error)

	// DoGetProducerFunc mocks the DoGetProducer method.
	DoGetProducerFunc func(ctx context.Context, topic string, name initialise.KafkaProducerName, cfg *config.Config) (kafka.IProducer, error)

	// DoGetS3ClientsFunc mocks the DoGetS3Clients method.
	DoGetS3ClientsFunc func(cfg *config.Config) (*session.Session, map[string]event.S3Client, error)

	// calls tracks calls to the methods.
	calls struct {
		// DoGetConsumer holds details about calls to the DoGetConsumer method.
		DoGetConsumer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cfg is the cfg argument value.
			Cfg *config.Config
		}
		// DoGetHealthChecker holds details about calls to the DoGetHealthChecker method.
		DoGetHealthChecker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BuildTime is the buildTime argument value.
			BuildTime string
			// GitCommit is the gitCommit argument value.
			GitCommit string
			// Version is the version argument value.
			Version string
			// Cfg is the cfg argument value.
			Cfg *config.Config
		}
		// DoGetProducer holds details about calls to the DoGetProducer method.
		DoGetProducer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Topic is the topic argument value.
			Topic string
			// Name is the name argument value.
			Name initialise.KafkaProducerName
			// Cfg is the cfg argument value.
			Cfg *config.Config
		}
		// DoGetS3Clients holds details about calls to the DoGetS3Clients method.
		DoGetS3Clients []struct {
			// Cfg is the cfg argument value.
			Cfg *config.Config
		}
	}
	lockDoGetConsumer      sync.RWMutex
	lockDoGetHealthChecker sync.RWMutex
	lockDoGetProducer      sync.RWMutex
	lockDoGetS3Clients     sync.RWMutex
}

// DoGetConsumer calls DoGetConsumerFunc.
func (mock *InitialiserMock) DoGetConsumer(ctx context.Context, cfg *config.Config) (kafka.IConsumerGroup, error) {
	if mock.DoGetConsumerFunc == nil {
		panic("InitialiserMock.DoGetConsumerFunc: method is nil but Initialiser.DoGetConsumer was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cfg *config.Config
	}{
		Ctx: ctx,
		Cfg: cfg,
	}
	mock.lockDoGetConsumer.Lock()
	mock.calls.DoGetConsumer = append(mock.calls.DoGetConsumer, callInfo)
	mock.lockDoGetConsumer.Unlock()
	return mock.DoGetConsumerFunc(ctx, cfg)
}

// DoGetConsumerCalls gets all the calls that were made to DoGetConsumer.
// Check the length with:
//     len(mockedInitialiser.DoGetConsumerCalls())
func (mock *InitialiserMock) DoGetConsumerCalls() []struct {
	Ctx context.Context
	Cfg *config.Config
} {
	var calls []struct {
		Ctx context.Context
		Cfg *config.Config
	}
	mock.lockDoGetConsumer.RLock()
	calls = mock.calls.DoGetConsumer
	mock.lockDoGetConsumer.RUnlock()
	return calls
}

// DoGetHealthChecker calls DoGetHealthCheckerFunc.
func (mock *InitialiserMock) DoGetHealthChecker(ctx context.Context, buildTime string, gitCommit string, version string, cfg *config.Config) (*healthcheck.HealthCheck, error) {
	if mock.DoGetHealthCheckerFunc == nil {
		panic("InitialiserMock.DoGetHealthCheckerFunc: method is nil but Initialiser.DoGetHealthChecker was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		BuildTime string
		GitCommit string
		Version   string
		Cfg       *config.Config
	}{
		Ctx:       ctx,
		BuildTime: buildTime,
		GitCommit: gitCommit,
		Version:   version,
		Cfg:       cfg,
	}
	mock.lockDoGetHealthChecker.Lock()
	mock.calls.DoGetHealthChecker = append(mock.calls.DoGetHealthChecker, callInfo)
	mock.lockDoGetHealthChecker.Unlock()
	return mock.DoGetHealthCheckerFunc(ctx, buildTime, gitCommit, version, cfg)
}

// DoGetHealthCheckerCalls gets all the calls that were made to DoGetHealthChecker.
// Check the length with:
//     len(mockedInitialiser.DoGetHealthCheckerCalls())
func (mock *InitialiserMock) DoGetHealthCheckerCalls() []struct {
	Ctx       context.Context
	BuildTime string
	GitCommit string
	Version   string
	Cfg       *config.Config
} {
	var calls []struct {
		Ctx       context.Context
		BuildTime string
		GitCommit string
		Version   string
		Cfg       *config.Config
	}
	mock.lockDoGetHealthChecker.RLock()
	calls = mock.calls.DoGetHealthChecker
	mock.lockDoGetHealthChecker.RUnlock()
	return calls
}

// DoGetProducer calls DoGetProducerFunc.
func (mock *InitialiserMock) DoGetProducer(ctx context.Context, topic string, name initialise.KafkaProducerName, cfg *config.Config) (kafka.IProducer, error) {
	if mock.DoGetProducerFunc == nil {
		panic("InitialiserMock.DoGetProducerFunc: method is nil but Initialiser.DoGetProducer was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Topic string
		Name  initialise.KafkaProducerName
		Cfg   *config.Config
	}{
		Ctx:   ctx,
		Topic: topic,
		Name:  name,
		Cfg:   cfg,
	}
	mock.lockDoGetProducer.Lock()
	mock.calls.DoGetProducer = append(mock.calls.DoGetProducer, callInfo)
	mock.lockDoGetProducer.Unlock()
	return mock.DoGetProducerFunc(ctx, topic, name, cfg)
}

// DoGetProducerCalls gets all the calls that were made to DoGetProducer.
// Check the length with:
//     len(mockedInitialiser.DoGetProducerCalls())
func (mock *InitialiserMock) DoGetProducerCalls() []struct {
	Ctx   context.Context
	Topic string
	Name  initialise.KafkaProducerName
	Cfg   *config.Config
} {
	var calls []struct {
		Ctx   context.Context
		Topic string
		Name  initialise.KafkaProducerName
		Cfg   *config.Config
	}
	mock.lockDoGetProducer.RLock()
	calls = mock.calls.DoGetProducer
	mock.lockDoGetProducer.RUnlock()
	return calls
}

// DoGetS3Clients calls DoGetS3ClientsFunc.
func (mock *InitialiserMock) DoGetS3Clients(cfg *config.Config) (*session.Session, map[string]event.S3Client, error) {
	if mock.DoGetS3ClientsFunc == nil {
		panic("InitialiserMock.DoGetS3ClientsFunc: method is nil but Initialiser.DoGetS3Clients was just called")
	}
	callInfo := struct {
		Cfg *config.Config
	}{
		Cfg: cfg,
	}
	mock.lockDoGetS3Clients.Lock()
	mock.calls.DoGetS3Clients = append(mock.calls.DoGetS3Clients, callInfo)
	mock.lockDoGetS3Clients.Unlock()
	return mock.DoGetS3ClientsFunc(cfg)
}

// DoGetS3ClientsCalls gets all the calls that were made to DoGetS3Clients.
// Check the length with:
//     len(mockedInitialiser.DoGetS3ClientsCalls())
func (mock *InitialiserMock) DoGetS3ClientsCalls() []struct {
	Cfg *config.Config
} {
	var calls []struct {
		Cfg *config.Config
	}
	mock.lockDoGetS3Clients.RLock()
	calls = mock.calls.DoGetS3Clients
	mock.lockDoGetS3Clients.RUnlock()
	return calls
}
